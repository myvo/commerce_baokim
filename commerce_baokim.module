<?php

/**
 * @file
 * Provides an example payment method for Drupal Commerce for testing and
 *   development.
 */

define('BAOKIM_SANDBOX_URL', 'http://sandbox.baokim.vn/payment/order/version11');
define('BAOKIM_SANDBOX_VERIFY_URL', 'http://sandbox.baokim.vn/bpn/verify');
define('BAOKIM_LIVE_URL', 'https://www.baokim.vn/payment/order/version11');
define('BAOKIM_LIVE_VERIFY_URL', 'https://www.baokim.vn/bpn/verify');

define('BAOKIM_SUCCESS_CALLBACK_URL', 'commerce_baokim/callback');

/**
 * Implements hook_menu().
 */
function commerce_baokim_menu() {
  $items = array();

  // Define an always accessible path to receive BPNs.
  // This URL will be given BaoKim when register new site.
  $items['commerce_baokim/callback/bpn'] = array(
    'page callback' => 'commerce_baokim_bpn',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  //Success callback page, to say thank you for payment.
  $items[BAOKIM_SUCCESS_CALLBACK_URL] = array(
    'title'    => 'Checkout complete',
    'page callback' => 'commerce_baokim_success_callback',
    'page arguments' => array(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Menu callback: BPNs
 */
function commerce_baokim_bpn() {
  //get bpn data from params
  $ipn = $_POST;
  
   //load order
  $order = FALSE;
  if (!empty($ipn['order_id'])) {
    $order = commerce_order_load($ipn['order_id']);
  }
  
  if($order === FALSE) {
	watchdog('commerce_baokim', t('Step1: FAILED - The order ID #@orderID is not exist.', array('@orderID' => $ipn['order_id'])));
	return FALSE;
  }
  
  //load payment method
  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
  $settings = $payment_method['settings'];
  
  // include BaoKimPayment API
  module_load_include('inc', 'commerce_baokim', 'BaoKimPayment');
  $baoKim = new BaoKimPayment();
  
  //check verify payment with BaoKim
  $urlVerifyBK = ($settings['server'] == 'sandbox') ? BAOKIM_SANDBOX_VERIFY_URL : BAOKIM_LIVE_VERIFY_URL;
  $url = $baoKim->createVerifyPaymentURL($urlVerifyBK, $ipn);
  $verifyMessage = drupal_http_request($url, array('timeout' => 10));
  if($verifyMessage == 'INVALID') {
	watchdog('commerce_baokim', t('Step1: FAILED - Payment of order #@orderid from @author (email: @email, phone: @phone,address: @address ) was failed.',
	  array(
	    '@orderid' => isset($ipn['order_id']) ? $ipn['order_id'] : '',
	    '@author' => isset($ipn['customer_name']) ? $ipn['customer_name'] : '', 
	    '@email' => isset($ipn['customer_email']) ? $ipn['customer_email'] : '',
	    '@phone' => isset($ipn['customer_phone']) ? $ipn['customer_phone'] : '',
	    '@address' => isset($ipn['customer_address']) ? $ipn['customer_address'] : '')
	  )
	);
	return FALSE;
  }
  
  //proccess order after validate success
  commerce_baokim_ipn_proccess($ipn, $order, $settings, $payment_method);
}

/**
 * Menu callback: baoKim success callback
 */
function commerce_baokim_success_callback() {
  global $base_url;
  
  //get bpn data from params
  $ipn = $_GET;
  
   //load order
  $order = FALSE;
  if (!empty($ipn['order_id'])) {
    $order = commerce_order_load($ipn['order_id']);
  }
  
  if($order === FALSE) {
	watchdog('commerce_baokim', t('Step1: FAILED - The order ID #@orderID is not exist.', array('@orderID' => $ipn['order_id'])));
    drupal_set_message(t('Check out is failed because order id is not exist.'));
    drupal_goto($base_url);
  }

  // include BaoKimPayment API
  module_load_include('inc', 'commerce_baokim', 'BaoKimPayment');
  $baoKim = new BaoKimPayment();
  
  //unset q arguments before verify response URL
  unset($ipn['q']);
  
  if(!$baoKim->verifyResponseUrl($ipn)) {
	watchdog('commerce_baokim', t('Callback: FAILED - Payment of order #@orderid from @author (email: @email, phone: @phone,address: @address ) was failed.',
	  array(
	    '@orderid' => isset($ipn['order_id']) ? $ipn['order_id'] : '',
	    '@author' => isset($ipn['customer_name']) ? $ipn['customer_name'] : '', 
	    '@email' => isset($ipn['customer_email']) ? $ipn['customer_email'] : '',
	    '@phone' => isset($ipn['customer_phone']) ? $ipn['customer_phone'] : '',
	    '@address' => isset($ipn['customer_address']) ? $ipn['customer_address'] : '')
	  )
	);
	
    commerce_payment_redirect_pane_previous_page($order);
	drupal_set_message(t('Verify BaoKim data is not passed.'));
    drupal_goto($base_url);
  }
  
  //load payment method
  $payment_method = commerce_payment_method_instance_load($order->data['payment_method']);
  $settings = $payment_method['settings'];
  
  //proccess order after validate success
  return commerce_baokim_thank_you_page($ipn, $order, $settings, $payment_method);
}

/**
 * Say thank you page
 */
function commerce_baokim_thank_you_page($ipn, $order, $settings, $payment_method) {
  // $rs = commerce_baokim_check_transaction_status($ipn['transaction_status']);
  $output = t('Your order is number @order_id. You can view your order on your account page when logged in.', array('@order_id' => $order->order_id));
  $output .= '<br/>'. t('Thank you for your payment.');
  return $output;
}

/**
 * Function proccess BPN callback
 */
function commerce_baokim_ipn_proccess($ipn, $order, $settings, $payment_method) {
  //verify success
  watchdog('commerce_baokim', 'Step1: SUCCESS - Payment response is verified.');
  
  // If this is a prior authorization capture IPN for which we've already
  // created a transaction...
  $auth_ipn = commerce_baokim_ipn_load($ipn['transaction_id']);
  if($auth_ipn) {
    // Load the prior IPN's transaction and update that with the capture values.
    $transaction = commerce_payment_transaction_load($auth_ipn['transaction_id']);
  }
  else {
    // Create a new payment transaction for the order.
    $transaction = commerce_payment_transaction_new('baokim', $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
  }
  $transaction->remote_id = $ipn['transaction_id'];
  
  //BaoKim only support VND
  $transaction->amount = commerce_currency_decimal_to_amount($ipn['total_amount'], $settings['currency_code']);
  $transaction->currency_code = $settings['currency_code'];
  $transaction->payload[REQUEST_TIME] = $ipn;
  $transaction->payment_method = 'baokim';

  // Set the transaction's statuses based on the IPN's payment_status.
  $transaction->remote_status = $ipn['transaction_status'];
  
  //check and store payment info
  $rs = commerce_baokim_check_transaction_status($ipn['transaction_status']);
  $transaction->message = $rs['message'];
  $transaction->status = $rs['status'];
  
  //ensure data before write a record
  $ipn['txn_id'] = $ipn['transaction_id'];
  $ipn['payment_status'] = $ipn['transaction_status'];
  
  //save payment info and commerce baokim ipn info
  //save payment info
  // Save the transaction information.
  commerce_payment_transaction_save($transaction);
  $ipn['transaction_id'] = $transaction->transaction_id;
  
  //save BaoKim ipn
  commerce_baokim_ipn_save($ipn);
  
  // Create a billing profile based on the IPN if enabled.

  commerce_payment_redirect_pane_next_page($order);
  watchdog('commerce_baokim', 'Step2: IPN processed for Order @order_number with ID @txn_id.', array('@txn_id' => $ipn['txn_id'], '@order_number' => $order->order_number), WATCHDOG_INFO);
}

function commerce_baokim_check_transaction_status($transaction_status) {
  //check and store payment info
  $msg = commerce_baokim_get_payment_status_name($transaction_status);
  $status = 'unknown';
  
  switch($transaction_status) {
    //payment failed
    case 1:
    case 2:
	case 13:
	  //payment pending
	  $status = COMMERCE_PAYMENT_STATUS_PENDING;
	  break;
	  
    case 5:
    case 6:
    case 7:
    case 8:
    case 12:
    case 15:
	  $status = COMMERCE_PAYMENT_STATUS_FAILURE;
	  break;
	  
    //payment completed
	case 4:
	  //check if ipn total_amount != order's total_amount
	  //do not change transaction_status to COMPLETED
	  //need it?
	  
	  $status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $msg = t('The payment has completed.');
	  break;
	  
	//other status
	default:
	  $status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $msg = t('Do not know what\'s happended. Payment status (transaction_status from BaoKim) @id', array('@id' => $transaction_status));
	  break;
  }
  
  return array(
    'message' => $msg,
	'status'  => $status
  );
}

/**
 * Saves an IPN with some meta data related to local processing.
 *
 * @param $ipn
 *   An IPN array with additional parameters for the order_id and Commerce
 *     Payment transaction_id associated with the IPN.
 *
 * @return
 *   The operation performed by drupal_write_record() on save; since the IPN is
 *     received by reference, it will also contain the serial numeric ipn_id
 *     used locally.
 */
function commerce_baokim_ipn_save($ipn) {
  if (!empty($ipn['ipn_id']) && commerce_baokim_ipn_load($ipn['txn_id'])) {
    $ipn['changed'] = REQUEST_TIME;

    return drupal_write_record('commerce_baokim_ipn', $ipn, 'ipn_id');
  }
  else {
    $ipn['created'] = REQUEST_TIME;
    $ipn['changed'] = REQUEST_TIME;

    return drupal_write_record('commerce_baokim_ipn', $ipn);
  }
}

/**
 * Loads a stored IPN by ID.
 *
 * @param $id
 *   The ID of the IPN to load.
 * @param $type
 *   The type of ID you've specified, either the serial numeric ipn_id or the
 *     actual BaoKim txn_id. Defaults to txn_id.
 *
 * @return
 *   The original IPN with some meta data related to local processing.
 */
function commerce_baokim_ipn_load($id, $type = 'txn_id') {
  return db_select('commerce_baokim_ipn', 'cpi')
    ->fields('cpi')
    ->condition('cpi.' . $type, $id)
    ->execute()
    ->fetchAssoc();
}

/**
 * Get payment status name when received callback successfully.
 */
function commerce_baokim_get_payment_status_name($payment_status_id) {
  $payment_status = array(
    1  => 'giao dịch chưa xác minh OTP',
	2  => 'giao dịch đã xác minh OTP',
	4  => 'giao dịch hoàn thành',
	5  => 'giao dịch bị hủy',
	6  => 'giao dịch bị từ chối nhận tiền',
	7  => 'giao dịch hết hạn',
	8  => 'giao dịch thất bại',
	12 => 'giao dịch bị đóng băng',
	13 => 'giao dịch bị tạm giữ (thanh toán an toàn)',
	15 => 'giao dịch bị hủy khi chưa xác minh OTP'
  );
  
  return $payment_status[$payment_status_id];
}

/**
 * Get payment type name when received callback successfully.
 */
function commerce_baokim_get_payment_type_name($payment_type_id) {
  $payment_types = array(
    1 => 'Thanh toán ngay',
	2 => 'Thanh toán an toàn'
  );
  
  return $payment_types[$payment_type_id];
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_baokim_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['baokim'] = array(
	'base'	=> 'commerce_baokim',
    'title' => t('BaoKim payment'),
    'description' => t('Demonstrates complete payment during checkout and serves as a development example.'),
    'active' => TRUE,
	'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_baokim_settings_form($settings = array()) {
  global $base_url;
  
  $form = array();
  $default_currency = variable_get('commerce_default_currency', 'USD');
  
  $defaultSettings = array(
	'currency_code' => 'VND',
    'server' => 'sandbox',
    'email'		=> '',
	'merchantID'	=> '',
	'securePass'	=> '',
	'show_payment_instructions'	=> FALSE
  );
  
  if($default_currency != $defaultSettings['currency_code']) {
	drupal_set_message(t('BaoKim payment only support VND currency.'), 'warning');
  }

  // Merge default settings into the stored settings array.
  $settings = (array) $settings + $defaultSettings;

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('BaoKim e-mail address'),
    '#description' => t('The primary e-mail address of the BaoKim account you want to use to receive payments.'),
    '#default_value' => $settings['email'],
    '#required' => TRUE,
  );
  
  $form['merchantID'] = array(
    '#type' => 'textfield',
    '#title' => t('BaoKim merchant ID'),
    '#description' => t('Merchant ID is provided by BaoKim'),
    '#default_value' => $settings['merchantID'],
    '#required' => TRUE,
  );
  
  $form['securePass'] = array(
    '#type' => 'textfield',
    '#title' => t('BaoKim secure password'),
    '#description' => t('Secure password is provided by BaoKim'),
    '#default_value' => $settings['securePass'],
    '#required' => TRUE,
  );
  
  $form['currency_code'] = array(
    '#type' => 'select',
    '#title' => t('Default currency'),
    '#description' => t('Transactions in other currencies will be converted to this currency, so multi-currency sites must be configured to use appropriate conversion rates.'),
    '#options' => array('VND' => 'VND'),
    '#default_value' => $settings['currency_code'],
  );
  
  $form['show_payment_instructions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show a message on the checkout form when BaoKim WPS is selected telling the customer to "Continue with checkout to complete payment via BaoKim."'),
    '#default_value' => $settings['show_payment_instructions'],
  );
  
  $form['server'] = array(
    '#type' => 'radios',
    '#title' => t('BaoKim server'),
    '#options' => array(
      'sandbox' => ('Sandbox - use for testing, requires a BaoKim Sandbox account'),
      'live' => ('Live - use for processing real transactions'),
    ),
    '#default_value' => $settings['server'],
  );

  return $form;
}

/**
 * Payment method callback: submit form.
 */
function commerce_baokim_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form = array();

  if (!empty($payment_method['settings']['show_payment_instructions'])) {
    $form['baokim_information'] = array(
      '#markup' => '<span class="commerce-baokim-info">' . t('(Continue with checkout to complete payment via BaoKim.)') . '</span>',
    );
  }

  return $form;
}

/**
 * Payment method callback: submit form submission.
 */
function commerce_baokim_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  // Return an error if the enabling action's settings haven't been configured.
  if (empty($payment_method['settings']['email']) || empty($payment_method['settings']['merchantID'])
    || empty($payment_method['settings']['securePass'])) {
    drupal_set_message(t('BaoKim payment is not configured for use.'), 'error');
    return array();
  }
  
  //update order status
  commerce_order_status_update($order, 'checkout_payment');
  
  $payment_method['settings']['cancel_return'] = url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
  $payment_method['settings']['payment_method'] = $payment_method['instance_id'];
  
  commerce_baokim_redirect_to_baokim($order, $payment_method['settings']);
}

/**
 * Builds a Website Payments Standard URL from an order object and redirect to BaoKim URL
 *
 * @param $order
 *   The fully loaded order being paid for.
 * @param $settings
 *   An array of settings used to build out the form, including:
 *   - server: which server to use, either sandbox or live
 *   - business: the BaoKim e-mail address the payment submits to
 *   - cancel_return: the URL BaoKim should send the user to on cancellation
 *
 * @return
 *   A renderable form array.
 */
function commerce_baokim_redirect_to_baokim($order, $settings) {
  global $base_url;
  
  // include BaoKimPayment API
  module_load_include('inc', 'commerce_baokim', 'BaoKimPayment');
  
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Determine the currency code to use to actually process the transaction,
  // which will either be the default currency code or the currency code of the
  // order if it's supported by BaoKim if that option is enabled.
  $currency_code = $settings['currency_code'];
  $order_currency_code = $wrapper->commerce_order_total->currency_code->value();

  $amount = $wrapper->commerce_order_total->amount->value();

  // Ensure a default value for the payment_method setting.
  $settings += array('payment_method' => '');

  //prepare data and send to baokim
  $baoKimURL = ($settings['server'] == 'sandbox') ? BAOKIM_SANDBOX_URL : BAOKIM_LIVE_URL;
  $baoKim = new BaoKimPayment($baoKimURL, $settings['merchantID'], $settings['securePass']);

  $total_amount = $amount;
  if($currency_code != $order_currency_code) {
    $total_amount = commerce_currency_amount_to_decimal(commerce_currency_convert($amount, $order_currency_code, $currency_code), $currency_code);
  }
  
  
  $urlBKRequest = $baoKim->createRequestUrl(
	$order->order_number,
	$settings['email'],
	$total_amount,
	0,
	0,
	t('Order @order_number at @store', array('@order_number' => $order->order_number, '@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE))))),
	url(BAOKIM_SUCCESS_CALLBACK_URL, array('absolute' => TRUE)),
	$settings['cancel_return'],
	$base_url /*TEMP*/
  );
  
  drupal_goto($urlBKRequest);
}